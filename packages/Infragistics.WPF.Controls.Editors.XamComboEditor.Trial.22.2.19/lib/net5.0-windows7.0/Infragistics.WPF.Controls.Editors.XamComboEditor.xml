<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics.WPF.Controls.Editors.XamComboEditor</name>
    </assembly>
    <members>
        <member name="T:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer">
            <summary>
            An automation peer for the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/>.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.#ctor(Infragistics.Controls.Editors.Primitives.ComboCellsPanel)">
            <summary>
            Initializes a new instance of the ComboCellsPanelAutomationPeer class.
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> that this automation peer controls.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.Row_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the PropertyChanged event of the Row. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified. </returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>The value of the control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.IsSelected">
            <summary>
            Gets a value indicating whether an item is selected.
            </summary>
            <value></value>
            <returns>true if the element is selected; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboCellsPanelAutomationPeer.SelectionContainer">
            <summary>
            Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider"/> and acts as the container for the calling object.
            </summary>
            <value></value>
            <returns>The UI automation provider.</returns>
        </member>
        <member name="T:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2">
            <summary>
            An automation peer for ComboEditorBase allowing screenreaders and programatic user interaction.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.#ctor(Infragistics.Controls.Editors.ComboEditorItemControl)">
            <summary>
            Initializes a new instance of theComboEditorItemControlAutomationPeer class.
            </summary>
            <param name="owner">The <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> that this automation peer controls.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.SetValue(System.String)">
            <summary>
            Sets the value of a control.
            </summary>
            <param name="value">The value to set. The provider is responsible for converting the value to the appropriate data type.</param>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the value of a control is read-only.
            </summary>
            <value></value>
            <returns>true if the value is read-only; false if it can be modified. </returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.Value">
            <summary>
            Gets the value of the control.
            </summary>
            <value></value>
            <returns>The value of the control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.AddToSelection">
            <summary>
            Adds the current element to the collection of selected items.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.RemoveFromSelection">
            <summary>
            Removes the current element from the collection of selected items.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.Select">
            <summary>
            Clears any existing selection and then selects the current element.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.IsSelected">
            <summary>
            Gets a value indicating whether an item is selected.
            </summary>
            <value></value>
            <returns>true if the element is selected; otherwise, false.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.ComboEditorItemControlAutomationPeer`2.SelectionContainer">
            <summary>
            Gets the UI automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider"/> and acts as the container for the calling object.
            </summary>
            <value></value>
            <returns>The UI automation provider.</returns>
        </member>
        <member name="T:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2">
            <summary>
            An automation peer for ComboEditorBase allowing screenreaders and programatic user interaction.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.#ctor(Infragistics.Controls.Editors.ComboEditorBase{`0,`1})">
            <summary>
            Initializes a new instance of the XamComboEditorAutomationPeer class.
            </summary>
            <param name="owner">The ComboEditorBase that this automation peer controls.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.GetAutomationControlTypeCore">
            <summary>
            Returns the control type for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlType"/>.
            </summary>
            <returns>A value of the enumeration.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.GetClassNameCore">
            <summary>
            Overrides the framework invocation requesting a string that describes this control.
            </summary>
            <returns>A string describing the name of this control.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.GetNameCore">
            <summary>
            Returns the text label of the <see cref="T:System.Windows.FrameworkElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>. This method is called by <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetName"/>.
            </summary>
            <returns>
            The text label of the element that is associated with this automation peer.
            </returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Returns the control pattern for the <see cref="T:System.Windows.UIElement"/> that is associated with this <see cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer"/>.
            </summary>
            <param name="patternInterface">One of the enumeration values.</param>
            <returns>See Remarks.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.RaiseExpandCollapseStatePropertyChangedEvent(System.Windows.Automation.ExpandCollapseState,System.Windows.Automation.ExpandCollapseState)">
            <summary>
            Raises the ExpandCollapseStatePropertyChangedEvent.
            </summary>
            <param name="oldValue">if set to <c>true</c> The old value.</param>
            <param name="newValue">if set to <c>true</c> The new value.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.OwningComboEditor_DropDownOpened(System.Object,System.EventArgs)">
            <summary>
            Handles the DropDownOpened event of the OwningComboEditor property as XamWebComboEditor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.OwningComboEditor_DropDownClosed(System.Object,System.EventArgs)">
            <summary>
            Handles the DropDownClosed event of the OwningComboEditor property as XamWebComboEditor.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI automation provider allows more than one child element to be selected concurrently.
            </summary>
            <value></value>
            <returns>true if multiple selection is allowed; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.GetSelection">
            <summary>
            Retrieves a UI automation provider for each child element that is selected.
            </summary>
            <returns>An array of UI automation providers.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI automation provider requires at least one child element to be selected.
            </summary>
            <value></value>
            <returns>true if selection is required; otherwise, false.</returns>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.Collapse">
            <summary>
            Hides all nodes, controls, or content that are descendants of the control.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.Expand">
            <summary>
            Displays all child nodes, controls, or content of the control.
            </summary>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the control.
            </summary>
            <value></value>
            <returns>The state (expanded or collapsed) of the control.</returns>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.IsReadOnly">
            <summary>
            Gets if the <see cref="T:System.Windows.Automation.Provider.IValueProvider"/> member is editable.
            </summary>
        </member>
        <member name="M:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.SetValue(System.String)">
            <summary>
            Sets the value to <see cref="T:System.Windows.Automation.Provider.IValueProvider"/> object.
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:Infragistics.AutomationPeers.XamComboEditorAutomationPeer`2.Value">
            <summary>
            Gets the value of the <see cref="T:System.Windows.Automation.Provider.IValueProvider"/> object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboEditorItem">
            <summary>
            Implements a selectable item inside a <see cref="T:Infragistics.Controls.Editors.XamComboEditor"/> class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItem.#ctor(System.Object,Infragistics.Controls.Editors.XamComboEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> class.
            </summary>
            <param name="data">The business object.</param>
            <param name="xamWebComboEditor">A reference to the ComboEditor.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItem.ComboEditor">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.XamComboEditor"/> that holds this <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItem.OnSelectionChanged">
            <summary>
            Invoked when the IsSelected proprety changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItem.CreateInstanceOfRecyclingElement">
            <summary>
            Creates an isntance of <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> 
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItem.OnElementAttached(Infragistics.Controls.Editors.ComboEditorItemControl)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItem.OnElementReleased(Infragistics.Controls.Editors.ComboEditorItemControl)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> is removed from the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItem.MeasureRaised">
            <summary>
            Gets/Sets whether the measure method was raised when Measure was called. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboEditorItemBase`1">
            <summary>
            Implements a selectable item inside a ComboEditorBase class. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemBase`1.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ComboEditorItemBase class.
            </summary>
            <param name="data">The business object.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.Data">
            <summary>
            Gets the business object that is hold by this <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.IsSelected">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> is selected. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.IsFocused">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> is focused. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.Control">
            <summary>
            Gets or sets a <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> that is attached to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
            <remarks>A Control is only assoicated with a ComboEditorItem when it's in the viewport of the ItemsPanel.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> is Enabled. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.Style">
            <summary>
            Gets/Sets the style that will be applied to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> that represents this item. 
            Note: any style set on this item, will override any style set on the <see cref="T:Infragistics.Controls.Editors.XamComboEditor"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.MeasureRaised">
            <summary>
            Gets/sets whether the underlying control's Measure was raised when the Measure method was invoked. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemBase`1.OnSelectionChanged">
            <summary>
            Invoked when the IsSelected proprety changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemBase`1.SetSelected(System.Boolean)">
            <summary>
            Sets the selected state of an item. 
            </summary>
            <param name="isSelected">Specifies if the item will be selected.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemBase`1.OnElementAttached(`0)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemBase`1.OnElementReleased(`0)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> is removed from the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemBase`1.IsDataBound">
            <summary>
            Gets or sets a value indicating whether the object was created from a data source or adhoc. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboEditorItemCollection">
            <summary>
            Collection for internal usage that contains <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> objects..
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemCollection.#ctor(Infragistics.IProvideDataItems{Infragistics.Controls.Editors.ComboEditorItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemCollection"/> class.
            </summary>
            <param name="provider">An object implementing IProvideDataItems interface.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboEditorItemControl">
            <summary>
            A control used for visual presenting of an customer object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            <p class="body">
            OnApplyTemplate is a .NET framework method exposed by the FrameworkElement. This class overrides
            it to get the focus site from the control template whenever template gets applied to the control.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="e">Information about the property value that changed.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/>.
            </summary>
            <param propertyName="availableSize">The available size that this object can give to child objects. Infinity can be specified
            as a value to indicate the object will size to whatever content is available.</param>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemControl.Item">
            <summary>
            Gets or sets the parent ComobBoxItem object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemControl.DelayRecycling">
            <summary>
            Gets or sets a value indicating whether the object should be recycled.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorItemControl.OwnerPanel">
            <summary>
            Gets or sets the panel that owns this control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.EnsureVisualStates">
            <summary>
            Change the VisualState based on the IsSelected and IsFocused properties.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.GoToState(System.Boolean,System.String)">
            <summary>
            Sets a new VisualState. 
            </summary>
            <param name="useTransitions">Specifies if transition is used.</param>
            <param name="stateName">The name of the new VisualState.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnAttached(Infragistics.Controls.Editors.ComboEditorItem)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/>.
            </summary>
            <param name="comboEditorItem">The <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> that is being attached to the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnReleased(Infragistics.Controls.Editors.ComboEditorItem)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> releases the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/>.
            </summary>
            <param name="comboEditorItem">The <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> that is being released from the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/></param>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorItemControl.PropertyChanged">
            <summary>
            Event raised when a property on this object changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorItemControl.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propName">A property name.</param>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.ComboEditorItemValueProxy.ValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.Primitives.ComboEditorItemValueProxy.Value"/> dependency property. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ItemsPanel">
            <summary>
            A panel that lays out <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/> controls in virtualized vertical list.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2">
            <summary>
            A panel containing the ComboEditorItemBase objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.ItemsPanel"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the FrameworkElement-derived class. 
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes. </returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ComboEditor">
            <summary>
            Gets a reference to the parent ComboEditorBase.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.FixedRowsTop">
            <summary>
            Gets the rows that are currently fixed to the top of the Viewport.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.UseAvailableWidthToMeasureItem">
            <summary>
            Gets whether an item should measured with the available width or Infinity
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.VisibleItems">
            <summary>
            Gets or sets the the current visible ComboEditorItem objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ReleaseItem(Infragistics.ISupportRecycling)">
            <summary>
            Removes the attached ComboEditorItem
            </summary>
            <param name="comboEditorItem">The ComboEditorItem</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ThrowoutUnusedItems(System.Collections.Generic.List{`0})">
            <summary>
            Removes the unused items.
            </summary>
            <param name="previousVisibleItems">List of <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> objects.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.UpdateScrollInfo(System.Int32,System.Windows.Size)">
            <summary>
            Updates the ScrollInfo of the <see cref="T:Infragistics.Controls.Editors.Primitives.ItemsPanel"/>.
            Such as changing the horizontal/vertical scrollbar visibility, or their viewport size.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ReduceWidthWithRootBorderThickness(System.Double)">
            <summary>
            Reduces a given width with the root border element's thickness.
            </summary>
            <param name="width">The width.</param>
            <returns>The width reduced by the root border element's thickness.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.RenderItem``2(``0,System.Windows.Size)">
            <summary>
            Creates a control for the row, and adds it as child of the panel. 
            </summary>
            <param name="comboEditorItem">The ComboEditorItem that will be rendered.</param>
            <param name="availableSize"></param>
            <returns>The new desired size.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.ArrangeItem(System.Windows.FrameworkElement,System.Double,System.Double,System.Double)">
            <summary>
            Arranges the specified item in the panel
            </summary>
            <param name="elem"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.OnControlAttachedToItem(`1)">
            <summary>
            Raised when a control is attached to an item, before measure is called.
            </summary>
            <param name="cntrl"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ItemsPanelBase`2.UpdateHorizontalScrollBar(System.Windows.Controls.Primitives.ScrollBar,System.Windows.Size)">
            <summary>
            Updates the horizontal scrollbar, based on how many items it can scroll horizontally
            </summary>
            <param name="horizBar"></param>
            <param name="finalSize"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection">
            <summary>
            A Collection of <see cref="T:Infragistics.Controls.Editors.ComboCell"/> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.#ctor(Infragistics.Controls.Editors.ComboColumnCollection,Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection"/> class.
            </summary>
            <param propertyName="columns">The <see cref="T:Infragistics.Controls.Editors.ComboColumnCollection"/> associated with the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection"/></param>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> that owns the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.GetCount">
            <summary>
            Returns the total number of <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>s in the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection"/>
            </summary>
            <returns>The total number of cells.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.IndexOf(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Gets the index of the specified <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>.
            </summary>
            <param propertyName="item"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.GetItem(System.Int32)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>  item at the index given.  
            </summary>
            <param propertyName="index">The index of the cell to be retrieved</param>
            <returns>The ComboCellBase object at the given index.</returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.Item(Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the corresponding <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
            <param propertyName="column">The column that should be used for reference.</param>
            <returns>
            The <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the corresponding <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            If no Cell exists, one is created.
            If the column doesn't exist, null is returned. 
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.Item(System.String)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the corresponding <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
            <param propertyName="key">The key of the column that should be used for reference.</param>
            <returns>
            The <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the corresponding <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            If no Cell exists, one is created.
            If the column doesn't exist, null is returned. 
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsCollection.Row">
            <summary>
            Gets the Row this collection represents.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider">
            <summary>
            A class used to provide content to a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object for a particular <see cref="T:Infragistics.Controls.Editors.CheckboxComboColumn"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider.AdjustDisplayElement(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Called during EnsureContent to allow the provider a chance to modify it's display based on the current conditions.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider.ResolveDisplayElement(Infragistics.Controls.Editors.ComboCellBase,System.Windows.Data.Binding)">
            <summary>
            Sets up the element that will be displayed in a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>. 
            </summary>
            <param propertyName="cell">The cell that the display element will be displayed in.</param>
            <param propertyName="cellBinding">A <see cref="T:System.Windows.Data.Binding"/> object that can be applied to the cell. Note: this binding can be null.</param>
            <returns>The element that should be displayed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase">
            <summary>
            An abstract class used to provide content to a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object for a particular <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase.ResolveDisplayElement(Infragistics.Controls.Editors.ComboCellBase,System.Windows.Data.Binding)">
            <summary>
            Sets up the element that will be displayed in a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>. 
            </summary>
            <param propertyName="cell">The cell that the display element will be displayed in.</param>
            <param propertyName="cellBinding">A <see cref="T:System.Windows.Data.Binding"/> object that can be applied to the cell. Note: this binding can be null.</param>
            <returns>The element that should be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase.AdjustDisplayElement(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Called during EnsureContent to allow the provider a chance to modify it's display based on the current conditions.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase.ApplyFormatting(System.Object,Infragistics.Controls.Editors.ComboColumn,System.Globalization.CultureInfo)">
            <summary>
            Allows the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> to update the value being set for the display element.
            </summary>
            <param propertyName="value">The original data value from the underlying data.</param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> whose properties should be used to determine the formatting.</param>
            <param propertyName="culture"></param>
            <returns>The value that should be displayed in the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase.ResolveBinding(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Builds the binding that will be used for a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
            <returns>If a binding cannot be created, null will be returned.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase.ResolveBindingInternal(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Builds the binding that will be used for a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
            <returns>If a binding cannot be created, null will be returned.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.DateComboColumnContentProvider">
            <summary>
            A class used to provide content to a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object for a particular <see cref="T:Infragistics.Controls.Editors.ImageComboColumn"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.DateComboColumnContentProvider.ApplyFormatting(System.Object,Infragistics.Controls.Editors.ComboColumn,System.Globalization.CultureInfo)">
            <summary>
            Allows the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> to update the value being set for the display element.
            </summary>
            <param propertyName="value">The original data value from the underlying data.</param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> whose properties should be used to determine the formatting.</param>
            <param propertyName="culture"></param>
            <returns>The value that should be displayed in the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ImageComboColumnContentProvider">
            <summary>
            A class used to provide content to a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object for a particular <see cref="T:Infragistics.Controls.Editors.ImageComboColumn"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ImageComboColumnContentProvider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ImageComboColumnContentProvider.AdjustDisplayElement(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Called during EnsureContent to allow the provider a chance to modify it's display based on the current conditions.
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ImageComboColumnContentProvider.ResolveDisplayElement(Infragistics.Controls.Editors.ComboCellBase,System.Windows.Data.Binding)">
            <summary>
            Sets up the element that will be displayed in a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>. 
            </summary>
            <param propertyName="cell">The cell that the display element will be displayed in.</param>
            <param propertyName="cellBinding">A <see cref="T:System.Windows.Data.Binding"/> object that can be applied to the cell. Note: this binding can be null.</param>
            <returns>The element that should be displayed.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider">
            <summary>
            A class used to provide content to a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object for a particular <see cref="T:Infragistics.Controls.Editors.TextComboColumn"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider.#ctor">
            <summary>
            Instantiates a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider.ResolveDisplayElement(Infragistics.Controls.Editors.ComboCellBase,System.Windows.Data.Binding)">
            <summary>
            Sets up the element that will be displayed in a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>, when the cell is not in edit mode. 
            </summary>
            <param propertyName="cell">The cell that the display element will be displayed in.</param>
            <param propertyName="cellBinding">A <see cref="T:System.Windows.Data.Binding"/> object that can be applied to the cell. Note: this binding can be null.</param>
            <returns>The element that should be displayed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider.ApplyFormatting(System.Object,Infragistics.Controls.Editors.ComboColumn,System.Globalization.CultureInfo)">
            <summary>
            Allows the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> to update the value being set for the display element.
            </summary>
            <param propertyName="value">The original data value from the underlying data.</param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> whose properties should be used to determine the formatting.</param>
            <param propertyName="culture"></param>
            <returns>The value that should be displayed in the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandBase">
            <summary>
            Base class for all commands that deal with a <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandBase.CanExecute(System.Object)">
            <summary>
            Reports if the command can be executed on the object inputted.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandBase.Execute(System.Object)">
            <summary>
            Executes the command 
            </summary>
            <param name="parameter">The <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> object that will be executed against.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandBase.ExecuteCommand(System.Object)">
            <summary>
            Executes the specific command on the specified <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
            <param name="parameter">The parameter info for the command.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandSource">
            <summary>
            The command source object for <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> object.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandSource.CommandType">
            <summary>
            Gets or sets the MultiColumnComboEditorCommand which is to be executed by the command.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorCommandSource.ResolveCommand">
            <summary>
            Generates the <see cref="T:System.Windows.Input.ICommand"/> object that will execute the command.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorClearSelectionCommand">
            <summary>
            A command that clears the list of the currently selected items.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorClearSelectionCommand.CanExecute(System.Object)">
            <summary>
            Returns true if the command can be executed on the object.
            </summary>
            <param name="parameter">The object that the command will be executed against.</param>
            <returns>True if the object can support this command.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboEditorClearSelectionCommand.ExecuteCommand(System.Object)">
            <summary>
            Clears the list of the currently selected items.
            </summary>
            <param name="parameter">The parameter info associated with the command.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock">
            <summary>
            Specialized TextBlock that highlights portions of the text that matches a supplied string.  For internal use only.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of the <see cref="T:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock"/>.
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ComboEditorBase when a new template is applied. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.TextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.Text"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.Text">
            <summary>
            Gets/sets the text associated with the control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.Highlight">
            <summary>
            Determines the color of the <see cref="T:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock"/> highlight.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.HighlightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.Highlight"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.HighlightingTextBlock.OnHighlightChanged(System.Windows.Media.Brush,System.Windows.Media.Brush)">
            <summary>
            
            </summary>
            <param name="oldBrush"></param>
            <param name="newBrush"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel">
            <summary>
            A panel that lays out <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/> objects in virtualized vertical list.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.FixedRowsTop">
            <summary>
            Gets the rows that are currently fixed to the top of the Viewport.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.OnControlAttachedToItem(Infragistics.Controls.Editors.Primitives.ComboCellsPanel)">
            <summary>
            Raised when a control is attached to an item, before measure is called.
            </summary>
            <param name="cntrl"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the FrameworkElement-derived class. 
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes. </returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.UseAvailableWidthToMeasureItem">
            <summary>
            Gets whether an item should measured with the available width or Infinity
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.UpdateHorizontalScrollBar(System.Windows.Controls.Primitives.ScrollBar,System.Windows.Size)">
            <summary>
            Updates the horizontal scrollbar, based on how many items it can scroll horizontally
            </summary>
            <param name="horizBar"></param>
            <param name="finalSize"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel.ArrangeItem(System.Windows.FrameworkElement,System.Double,System.Double,System.Double)">
            <summary>
            Arranges the specified item in the panel
            </summary>
            <param name="elem"></param>
            <param name="left"></param>
            <param name="top"></param>
            <param name="width"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel">
            <summary>
            A panel that lays out <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> objects in a horizontal list.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.Row">
            <summary>
            Gets a refernce to the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> that owns the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.Owner">
            <summary>
            Gets/sets the MultiColumnComboItemsPanel that owns this control.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.VisibleCells">
            <summary>
            Gets a list of <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects thats are currently visible.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.VisibleFixedLeftCells">
            <summary>
            Gets a list of <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects that are fixed to the left.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.VisibleFixedRightCells">
            <summary>
            Gets a list of <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects that are fixed to the right. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.PreviousInvalidateHeight">
            <summary>
            Used to store off the last height that was passed into the MeasuerOverride method of this panel.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.OnAttached(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> is attached to the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/>.
            </summary>
            <param propertyName="row">The row that is being attached to the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.OnReleased(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> releases the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/>.
            </summary>
            <param propertyName="row">The row that is being removed from the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.RenderCells(System.Double)">
            <summary>
            Lays out which cells will be displayed in the given viewport. 
            </summary>
            <param propertyName="availableWidth">The total width that the cells have to work with.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.RenderCell(Infragistics.Controls.Editors.ComboColumn,System.Collections.ObjectModel.Collection{Infragistics.Controls.Editors.ComboCellBase},System.Double@,System.Boolean,System.Collections.ObjectModel.Collection{Infragistics.Controls.Editors.ComboCellBase},System.Boolean)">
            <summary>
            Displays the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the specified <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/></param>
            <param propertyName="starColumns">A list of cells that have a width of type star.</param>
            <param propertyName="maxHeight">The height of the largest cell, if the cell's height that is being rendered is larger, maxHeight should be adjusted.</param>
            <param propertyName="insert">Whether or not the cell should be added, or inserted at the first position of the specified visible cells.</param>
            <param propertyName="visibleCells">The collection of cells that rendered cell should be added to.</param>
            <param propertyName="isInfinite">Lets the method know if the available width is infinite.</param>
            <returns>The width that that <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> is consuming.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.OnCellMouseOver">
            <summary>
            Called when a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> is moused over.
            All Cells of the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> will then go to it's "MouseOver" VisualState.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.OnCellMouseLeave">
            <summary>
            Called when the mouse  leaves a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>.
            All Cells of the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> will then go to it's "Normal" VisualState.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.SetupStarCells(System.Double,System.Double,System.Double@,System.Collections.ObjectModel.Collection{Infragistics.Controls.Editors.ComboCellBase})">
            <summary>
            Loops through the start columns and updates their width appropriately. 
            </summary>
            <param propertyName="availableWidth"></param>
            <param propertyName="currentWidth"></param>
            <param propertyName="maxHeight"></param>
            <param propertyName="starColumns"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "measure" pass of the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/>.
            </summary>
            <param propertyName="availableSize">The available size that this object can give to child objects. Infinity can be specified
            as a value to indicate the object will size to whatever content is available.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges each <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> that should be visible, one next to  the other, similar to a 
            Horizontal <see cref="T:System.Windows.Controls.StackPanel"/>.
            </summary>
            <param propertyName="finalSize">
            The final area within the parent that this object 
            should use to arrange itself and its children.
            </param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboCellsPanel.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.SpecializedTextBox">
            <summary>
            For Internal Use Only: TextBox wrapper class that allows the consumer to pre-validate text before allowing the underlying TextBox to consume it.
            We use this to prevent Japanese text from causing catastrophic failures.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.#ctor">
            <summary>
            Constructor for SpecializedTextBox, just used to set our default value;
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
             Called before the System.Windows.UIElement.KeyDown event occurs.
            </summary>
             <param name="e" >Provides data about the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
             Called before the System.Windows.UIElement.TextInput event occurs.
            </summary>
             <param name="e" >Provides data about the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called before the System.Windows.UIElement.PreviewKeyDown event occurs.
            </summary>
            <param name="e">Provides data about the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when content in this editing control changes.
            </summary>
            <param name="e">The arguments associated with the content change.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.Primitives.SpecializedTextBox.AllowTextChanges">
            <summary>
            Specifies whether or not the text should be changed at any given point.  This is to fix the catastrophic failures for IME.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Primitives.ComboColumnWidthTypeConverter">
            <summary>
            A Type Converter that converts from a string to a <see cref="!:ColumnWidth"/> object;
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnWidthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object of the specified type to a <see cref="!:ColumnWidth"/>.
            </summary>
            <param propertyName="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param propertyName="sourceType">The type that you want to convert from.</param>
            <returns>true if sourceType is a <see cref="T:System.String"/> or of the specified type.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnWidthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a <see cref="!:ColumnWidth"/>.
            </summary>
            <param propertyName="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param propertyName="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the currentIndex culture.</param>
            <param propertyName="value">The object to covert to the <see cref="!:ColumnWidth"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnWidthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Allows the ColumnWidth property to be converted to Strings.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.Primitives.ComboColumnWidthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the ColumnWidth object to a String. 
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns>A string.</returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.CustomValueEnteredActions">
            <summary>
            An Enum, that allows a user to specify what action should occur, when entering data into the combo editor
            that doesn't exist in the underlying ItemsSource.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.CustomValueEnteredActions.Ignore">
            <summary>
            This will prevent a user from typing in invalid data.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.CustomValueEnteredActions.Allow">
            <summary>
            The data will be allowed to be typed. But no items will be selected, and the underlying ItemsSource will remain untouched.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.CustomValueEnteredActions.Add">
            <summary>
            The data will be added to the underlying ItemsSource, and will become valid data for selection.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowType">
            <summary>
            An enumeration that contains all the different types of rows that the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> supports.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.RowType.DataRow">
            <summary>
            A row that represents a record of data.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.RowType.HeaderRow">
            <summary>
            A row that represents the header for a group of data rows.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.FilterMode">
            <summary>
            An enumeration that contains all the different filterin modes that the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> supports.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.FilterMode.FilterOnPrimaryColumnOnly">
            <summary>
            The <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> will filter the items in the dropdown list by including only those items whose primary column starts with the text typed in the control's TextBox.
            </summary>
            <remarks>
            The 'primary column' is the column that corresponds to the value set on the control's DisplayMemberPath property.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.FilterMode.FilterOnAllColumns">
            <summary>
            The <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> will filter the items in the dropdown list by including only those items that contain the text typed in the control's TextBox in any text column.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.MultiColumnComboEditorCommand">
            <summary>
            An enumeration of available commands that apply to the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.MultiColumnComboEditorCommand.ClearSelection">
            <summary>
            Clears the list of the currently selected items.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnFixedState">
            <summary>
            An enumeration that describes if a column is fixed, and if so on what side is it fixed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnFixedState.NotFixed">
            <summary>
            Column is not fixed.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnFixedState.Left">
            <summary>
            Column is fixed to the left.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnFixedState.Right">
            <summary>
            Column is fixed to the right. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnWidthType">
            <summary>
            An Enum that describes the type of width for the Column.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.Auto">
            <summary>
            A column's width will size to the largest header or cell in the column. 
            Note: while scrolling the width of the column may grow as larger content comes into view, however,
            it will never decrease in width.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.InitialAuto">
            <summary>
            A column's width will size to the largest header or cell in the column. However, this will only occur
            when the grid first loads. Or when a user double clicks on the edge of a column header to resize. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.SizeToHeader">
            <summary>
            A column's width will size to the header of a column. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.SizeToCells">
            <summary>
            A column's width will size to the largest cell in the column. 
            Note: while scrolling the width of the column may grow as larger content comes into view, however,
            it will never decrease in width.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.Star">
            <summary>
            A column's width will size to fill any remaing space in the dropdown's grid. 
            If more than one column has a star value specified, the remaing width will be split
            evenly amongst the columns. 
            If other columns already are taking up the majority of the space, the column's width will be zero.
            If the dropdown grid's width is Infinity, then the column will act as ComboColumnWidthType.Auto width.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumnWidthType.Numeric">
            <summary>
            A column's width will size to the value specified. 
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboItemAddingEventArgs`1">
            <summary>
            An object used in the ItemAdding event of the ComboEditorBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemAddingEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of the ComboItemAddingEventArgs object.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemAddingEventArgs`1.Item">
            <summary>
            The item being added to the ComboEditorBase dropdown.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboItemAddedEventArgs`1">
            <summary>
            An object used in the ItemAdded event of the ComboEditorBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemAddedEventArgs`1.#ctor(`0)">
            <summary>
            Creates a new instance of the ComboItemAddedEventArgs object.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemAddedEventArgs`1.Item">
            <summary>
            The item that was added to the ComboEditorBase dropdown.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ValidateInputTextEventArgs">
            <summary>
            An object used in the SpecializedTextBox ValidateInputText event of the <see cref="T:Infragistics.Controls.Editors.Primitives.SpecializedTextBox"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ValidateInputTextEventArgs.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ValidateInputTextEventArgs"/> object.
            </summary>
            <param name="text"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValidateInputTextEventArgs.TextToValidate">
            <summary>
            The text to validate.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ValidateInputTextEventArgs.IsValid">
            <summary>
            Where or not the text is valid.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.SelectionChangedEventArgs">
            <summary>
            An object used in the SelectionChanged event of the ComboEditorBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.SelectionChangedEventArgs.#ctor(System.Collections.IList,System.Collections.IList)">
            <summary>
            Creates a new instance of the SelectionChangedEventArgs object.
            </summary>
            <param name="addedItems">The items that were selected during this event.</param>
            <param name="removedItems">The items that were unselected during this event.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.SelectionChangedEventArgs.AddedItems">
            <summary>
            Gets a list that contains the items that were selected.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.SelectionChangedEventArgs.RemovedItems">
            <summary>
            Gets a list that contains the items that were unselected.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboItemFilter">
            <summary>
            An object that describes how the items should be filtered.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.Conditions">
            <summary>
            Gets the collection of filter conditions which will be applied to this column
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.LogicalOperator">
            <summary>
            Gets or sets the logical operator that will be used to combine all conditions from the Conditions property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.ObjectType">
            <summary>
            Gets or sets the Type of the object that is being processed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.FieldName">
            <summary>
            Gets or sets the field name of the property that is being filtered on.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.FieldType">
            <summary>
            Gets or sets the Type of the FieldName property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.ObjectTypedInfo">
            <summary>
            The Type of the object along with any PropertyDescriptors.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboItemFilter.Field">
            <summary>
            Gets/Sets the DataField associated with the ItemsFilter.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.GetCurrentExpression">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/>.
            </summary>
            <returns>The new expression.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.GetCurrentExpression(Infragistics.FilterContext,System.Object)">
            <summary>
            Generates the current expression for this <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/> using the inputted context.
            </summary>
            <param name="context">Context parameter</param>
            <returns>The new expression.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Infragistics.Controls.Editors.ComboItemFilter.PropertyChanged"/> event on this object.
            </summary>
            <param name="propertyName">The propertyName of the property changed.</param>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboItemFilter.PropertyChanged">
            <summary>
            Fired when a property changes on the <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Infragistics.Collections.CollectionBase`1"/> and optionally
            releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; 
            false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboItemFilter.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/>.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboCell">
            <summary>
            A standard Cell object in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCell.#ctor(Infragistics.Controls.Editors.ComboRowBase,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCell"/> class.
            </summary>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> object that owns the <see cref="T:Infragistics.Controls.Editors.ComboCell"/></param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object that the <see cref="T:Infragistics.Controls.Editors.ComboCell"/> represents.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCell.ResolveStyle">
            <summary>
            Gets the Style that should be applied to the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> when it's attached.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCell.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCell.CreateCellBindingConverter">
            <summary>
            Creates the <see cref="T:System.Windows.Data.IValueConverter"/> which will be attached to this <see cref="T:Infragistics.Controls.Editors.ComboCell"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboCellBase">
            <summary>
            The base class for all cell objects in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.#ctor(Infragistics.Controls.Editors.ComboRowBase,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> class.
            </summary>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> object that owns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/></param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object that the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> represents.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.Row">
            <summary>
            The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> that owns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.Column">
            <summary>
            The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> represents.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.Control">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> that is attached to the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
            <remarks>A Control is only assoicated with a Cell when it's in the viewport of the <see cref="T:Infragistics.Controls.Editors.Primitives.MultiColumnComboItemsPanel"/></remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.Style">
            <summary>
            Gets/Sets the <see cref="P:Infragistics.Controls.Editors.ComboCellBase.Style"/> that will be used for all <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> objects.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.ResolveStyle">
            <summary>
            Gets the Style that should be applied to the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> when it's attached.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.BindingMode">
            <summary>
            Gets the <see cref="P:Infragistics.Controls.Editors.ComboCellBase.BindingMode"/> that will be applied when binding a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> to data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.MeasuringSize">
            <summary>
            Used for storing the size of a cell, if it needs to be re-measured.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.ApplyStyle">
            <summary>
            Applies the resolved style of a Cell to it's <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.CreateCellBindingConverter">
            <summary>
            Creates the <see cref="T:System.Windows.Data.IValueConverter"/> which will be attached to this <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.EnsureCurrentState">
            <summary>
            Ensures that <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> is in the correct state.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.OnElementAttached(Infragistics.Controls.Editors.ComboCellControlBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
            <param propertyName="element">A <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellBase.OnElementReleased(Infragistics.Controls.Editors.ComboCellControlBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> is removed from the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            </summary>
            <param propertyName="element">A <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.RecyclingElementType">
            <summary>
            Gets the Type of control that should be created for the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellBase.RecyclingIdentifier">
            <summary>
            If a <see cref="P:Infragistics.Controls.Editors.ComboCellBase.RecyclingElementType"/> isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboCellControl">
            <summary>
            A visual representation of a <see cref="T:Infragistics.Controls.Editors.ComboCell"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellControl.ContentProvider">
            <summary>
            Resolves the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> for this <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControl.AttachContent">
            <summary>
            Invoked when content is attached to the Control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControl.EnsureContent">
            <summary>
            This will get called every time the control is measured, and allows the control to adjust it's content if necessary.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControl.EnsureVisualStates">
            <summary>
            Change the VisualState based on the IsSelected and IsFocused properties.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboCellControlBase">
            <summary>
            The base control class for all <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> controls.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellControlBase.ContentProvider">
            <summary>
            Resolves the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> for this <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboCellControlBase.Cell">
            <summary>
            The <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> that owns the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.AttachContent">
            <summary>
            Invoked when content is attached to the Control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.EnsureContent">
            <summary>
            This will get called every time the control is measured, and allows the control to adjust it's content if necessary.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.EnsureVisualStates">
            <summary>
            Change the VisualState of the cell control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.GoToState(System.Boolean,System.String)">
            <summary>
            Sets a new VisualState. 
            </summary>
            <param name="useTransitions">Specifies if transition is used.</param>
            <param name="stateName">The name of the new VisualState.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.OnAttached(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/>.
            </summary>
            <param propertyName="cell">The <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> that is being attached to the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.OnReleased(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> releases the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.OnLoaded">
            <summary>
            Raised when the <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> is Loaded. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.MeasureOverride(System.Windows.Size)">
            <summary>
            Allows a Cell to ensure it was propely measured. 
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboCellControlBase.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property value changes.
            </summary>
            <param name="e">Information about the property value that changed.</param>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboHeaderCell">
            <summary>
            A cell that represents a particular column in the header of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCell.#ctor(Infragistics.Controls.Editors.ComboRowBase,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/> class.
            </summary>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> object that owns the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/></param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object that the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/> represents.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboHeaderCell.ResolveStyle">
            <summary>
            Gets the Style that should be applied to the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCellControl"/> when it's attached.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCell.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCell.EnsureCurrentState">
            <summary>
            Ensures that <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/> is in the correct state.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboHeaderCellControl">
            <summary>
            A visual representation of a <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCellControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCellControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCellControl.AttachContent">
            <summary>
            Invoked when content is attached to the Control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCellControl.EnsureContent">
            <summary>
            This will get called every time the control is measured, and allows the control to adjust it's content if necessary.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderCellControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Allows a Cell to ensure it was propely measured. 
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell">
            <summary>
            A cell that represents a checkbox column for row selection in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCell.#ctor(Infragistics.Controls.Editors.ComboRowBase,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/> class.
            </summary>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> object that owns the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/></param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object that the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/> represents.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCell.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.RowSelectionCheckBoxCell.RecyclingIdentifier">
            <summary>
            If a RecyclingElementType isn't specified, this property can be used to offer another way of identifying 
            a reyclable element.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl">
            <summary>
            A visual representation of a <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.AttachContent">
            <summary>
            Invoked when content is attached to the Control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.OnReleased(Infragistics.Controls.Editors.ComboCellBase)">
            <summary>
            Cleanup anything that we shouldn't be using anymore
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Allows a Cell to ensure it was propely measured. 
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called before the MouseLeftButtonDown event is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxCellControl.OnApplyTemplate">
            <summary>
            Called when the template is applied.
            </summary>
            <remarks>
            <p class="body">
            OnApplyTemplate is a .NET framework method exposed by the FrameworkElement. This class overrides
            it to get the focus site from the control template whenever template gets applied to the control.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell">
            <summary>
            A cell that represents a <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn"/>column in the header of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell.#ctor(Infragistics.Controls.Editors.ComboRowBase,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell"/> class.
            </summary>
            <param propertyName="row">The <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> object that owns the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/></param>
            <param propertyName="column">The <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object that the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/> represents.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell.ResolveStyle">
            <summary>
            Gets the Style that should be applied to the <see cref="T:Infragistics.Controls.Editors.ComboHeaderCellControl"/> when it's attached.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCell.EnsureCurrentState">
            <summary>
            Ensures that <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/> is in the correct state.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCellControl">
            <summary>
            A visual representation of a <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCellControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCellControl"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxHeaderCellControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Allows a Cell to ensure it was propely measured. 
            </summary>
            <param name="availableSize"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.CheckboxComboColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that uses <see cref="T:System.Windows.Controls.CheckBox"/> elements to represent data.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.CheckboxComboColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider"/> that will be used to generate conent for <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects for this <see cref="T:Infragistics.Controls.Editors.CheckboxComboColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumn">
            <summary>
            An abstract objet that represents a field in the underlying data of whats bound to the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.KeyProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.Key"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.Key">
            <summary>
            Gets/sets a string that identifies the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.DataType">
            <summary>
            The DataType that the column's data is derived from.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.IsAutoGenerated">
            <summary>
            Gets whether or not the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> was predefined, or generated by the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> based on the 
            underlying data. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.ValueConverterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.ValueConverter"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.ValueConverter">
            <summary>
            Gets/sets the <see cref="T:System.Windows.Data.IValueConverter"/> that will be used to display the value in the column.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.ValueConverterParameterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.ValueConverterParameter"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.ValueConverterParameter">
            <summary>
            Gets/sets the parameter that will be used with the <see cref="P:Infragistics.Controls.Editors.ComboColumn.ValueConverter"/> property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.CellStyle">
            <summary>
            Gets/Sets the <see cref="T:System.Windows.Style"/> that will be used for all <see cref="T:Infragistics.Controls.Editors.ComboCellControl"/> objects on this <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.ActualWidth">
            <summary>
            Gets the Actual width of the column. 
            </summary>
            <remarks>Note: this value is only available when the column is rendered.</remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.MinimumWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.MinimumWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.MinimumWidth">
            <summary>
            Gets/sets the minimum width the column is allowed to be.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.MaximumWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.MaximumWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.MaximumWidth">
            <summary>
            Gets/sets the maximum width the column is allowed to be.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.HeaderTextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.HeaderText"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.HeaderText">
            <summary>
            Gets/Sets the text that will be displayed in the Header.
            </summary>
            <remarks>If the <see cref="P:Infragistics.Controls.Editors.ComboColumn.HeaderTemplate"/> is set, this property will have no effect.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.HeaderTextResolved">
            <summary>
            Gets a string that describes the Column. If the HeaderText property is not set, the Column's Key is returned.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.HeaderTemplate">
            <summary>
            Gets/Sets the <see cref="T:System.Windows.DataTemplate"/> used to define the Content of the Header of the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.HeaderStyle">
            <summary>
            Gets/Sets the <see cref="T:System.Windows.Style"/> that will be used for all <see cref="T:Infragistics.Controls.Editors.ComboHeaderCellControl"/> objects on this <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.WidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.Width"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.Width">
            <summary>
            Gets/sets the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/> of the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.WidthResolved">
            <summary>
            Resolves the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/> that is being applied to this <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboColumn.VisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboColumn.Visibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.Visibility">
            <summary>
            Gets/Sets the Visibility of the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumn.OnVisibilityChanged">
            <summary>
            Raised when the Visiblity of a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> has changed.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.DataField">
            <summary>
            Gets/Sets the <see cref="P:Infragistics.Controls.Editors.ComboColumn.DataField"/> associated with this particular <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.ComboEditor">
            <summary>
            Gets/sets the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> that owns this Column
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.IsFixed">
            <summary>
            Gets/Sets if a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> should be unpinned or pinned to the Left or Right side of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumn.IsFixable">
            <summary>
            Gets/Sets if a Column can be fixed. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumn.GenerateCell(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Based on the type of row that is passed in, this method generates a new <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> object.
            </summary>
            <param propertyName="row">The row in which the cell should be created for.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumn.GenerateHeaderCell(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Returns a new instance of a <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/>
            </summary>
            <param propertyName="row"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumn.GenerateDataCell(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Returns a new instance of a <see cref="T:Infragistics.Controls.Editors.ComboCell"/>
            </summary>
            <param propertyName="row"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> that will be used to generate conent for <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects for this <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnCollection">
            <summary>
            An ObservableCollection of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnCollection.#ctor(Infragistics.Controls.Editors.XamMultiColumnComboEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboColumnCollection"/> class.
            </summary>
            <param name="comboEditor"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.FixedAdornerColumns">
            <summary>
            A collection of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that should be displayed first and fixed in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            Note: these columns are generally columns that don't represent fields in the underlying data source such as the <see cref="P:Infragistics.Controls.Editors.ComboColumnCollection.RowSelectionCheckBoxColumn"/>. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.FixedColumnsLeft">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that are pinned to the left side./>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.FixedColumnsRight">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that are pinned to the right side./>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that has the specified key. 
            </summary>
            <param propertyName="key"></param>
            <returns>
            The column with the specified Key. 
            If more than one <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> has the same key, the first Column is returned.
            </returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.FillerColumn">
            <summary>
            Gets the column that is used to fill up empty space in a row. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.VisibleColumns">
            <summary>
            Gets a readonly list of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that are not hidden.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnCollection.StarColumns">
            <summary>
            Gets a readonly list of <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that have a width that are Star.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnCollection.RegisterFixedAdornerColumn(Infragistics.Controls.Editors.ComboColumn,System.Boolean)">
            <summary>
            Registers the specified <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> as a fixed column.
            </summary>
            <param propertyName="column"></param>
            <param propertyName="first">Specifies whether or not the column should be inserted at the first index position.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnCollection.UnregisterFixedAdornerColumn(Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Unregisters the specified <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> as a fixed column.
            </summary>
            <param propertyName="column"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnCollection.InvalidateColumnsCollections(System.Boolean)">
            <summary>
            Determines which columns are Fixed, Visible or Hidden. 
            </summary>
            <param propertyName="fullInvalidate"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raised when the underlying collection changes.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnTypeMapping">
            <summary>
            An object that defines the mapping between a particular data type and a particular column type in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnTypeMapping.ColumnType">
            <summary>
            Gets/sets the type of column that should be assoicated with the <see cref="P:Infragistics.Controls.Editors.ComboColumnTypeMapping.DataType"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnTypeMapping.DataType">
            <summary>
            Gets/sets the type of data that should be assoicated with the <see cref="P:Infragistics.Controls.Editors.ComboColumnTypeMapping.ColumnType"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Controls.Editors.ComboColumnTypeMapping"/> objects.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection"/> object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection.OnItemAdded(System.Int32,Infragistics.Controls.Editors.ComboColumnTypeMapping)">
            <summary>
            Invoked when an Item is added at the specified index.
            </summary>
            <param propertyName="index"></param>
            <param propertyName="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param propertyName="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnTypeMappingsCollection.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboColumnWidth">
            <summary>
            An object that is used to specify the Width of a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> object.
            </summary>	
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.SizeToHeader">
            <summary>
            Gets an instance of a SizeToHeader <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.SizeToCells">
            <summary>
            Gets an instance of a SizeToCells <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.Auto">
            <summary>
            Gets an instance of an Auto <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.InitialAuto">
            <summary>
            Gets an instance of an InitialAuto <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.Star">
            <summary>
            Gets an instance of a Star <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboColumnWidth.#ctor(System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/> struct of type ComboColumnWidthType.Numeric.
            </summary>
            <param propertyName="value">The width of the column.</param>
            <param propertyName="isStar">Whether the ComboColumnWidth should be of Type Star or Numeric.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.Value">
            <summary>
            Gets the value of the ComboColumnWidth property.
            </summary>
            <remarks>
            <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/>.Auto : 1 is returned.
            <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/>.SizeToCells : 1 is returned.
            <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/>.SizeToHeader : 1 is returned.
            <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/>.Numeric : the width of the column is returned.
            <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/>.Star : the percent compared to all other Start columns is returned.
            </remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboColumnWidth.WidthType">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidthType"/> of the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.FillerComboColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that fills any remaining space in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.FillerComboColumn.WidthResolved">
            <summary>
            The width of a <see cref="T:Infragistics.Controls.Editors.FillerComboColumn"/> is always *. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.FillerComboColumn.IsFixable">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.FillerComboColumn"/> is not Fixable.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FillerComboColumn.GenerateContentProvider">
            <summary>
            This column does not generate any conent.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.FixedComboColumnsCollection">
            <summary>
            A collection that contains the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> objects that are pinned in a specific direction.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.#ctor(Infragistics.Controls.Editors.ComboColumnFixedState)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.FixedComboColumnsCollection"/>
            </summary>
            <param propertyName="direction">The <see cref="T:Infragistics.Controls.Editors.ComboColumnFixedState"/> that a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> should be set to when added to the collection.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.FixedComboColumnsCollection.Direction">
            <summary>
            Gets/Sets the <see cref="T:Infragistics.Controls.Editors.ComboColumnFixedState"/> that items should be set to when added to this collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.AddItem(System.Int32,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param propertyName="index"></param>
            <param propertyName="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.InsertItem(System.Int32,Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Adds the item at the specified index. 
            </summary>
            <param propertyName="index"></param>
            <param propertyName="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param propertyName="index"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.ResetItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.AddItemSilently(Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Adds a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> to the collection without setting it's IsFixed property.
            </summary>
            <param propertyName="item"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.FixedComboColumnsCollection.RemoveItemSilently(Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Removes a <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> from the collection without setting it's IsFixed property.
            </summary>
            <param propertyName="item"></param>
        </member>
        <member name="T:Infragistics.Controls.Editors.DateComboColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that represents Date data.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.DateComboColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.DateComboColumnContentProvider"/> that will be used to generate content for <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects for this <see cref="T:Infragistics.Controls.Editors.DateComboColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.ImageComboColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that uses <see cref="T:System.Windows.Controls.Image"/> elements to represent data.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ImageComboColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.CheckboxComboColumnContentProvider"/> that will be used to generate conent for <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects for this <see cref="T:Infragistics.Controls.Editors.CheckboxComboColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Infragistics.Controls.Editors.ImageComboColumn.ImageStyle">
            <summary>
            Gets/sets the Style that will be applied to every <see cref="T:System.Windows.Controls.Image"/> in this <see cref="T:Infragistics.Controls.Editors.ImageComboColumn"/>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ImageComboColumn.ImageHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ImageComboColumn.ImageHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ImageComboColumn.ImageHeight">
            <summary>
            Gets / sets a height to all images in an <see cref="T:Infragistics.Controls.Editors.ImageComboColumn"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ImageComboColumn.ImageWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ImageComboColumn.ImageWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ImageComboColumn.ImageWidth">
            <summary>
            Gets / sets a width to all images in an <see cref="T:Infragistics.Controls.Editors.ImageComboColumn"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ReadOnlyKeyedComboColumnCollection`1">
            <summary>
            A ReadOnlyCollection that can be indexed by a string identifier.
            </summary>
            <typeparam propertyName="T"></typeparam>
        </member>
        <member name="M:Infragistics.Controls.Editors.ReadOnlyKeyedComboColumnCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ReadOnlyKeyedComboColumnCollection`1"/> object.
            </summary>
            <param propertyName="list"></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ReadOnlyKeyedComboColumnCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that has the specified key. 
            </summary>
            <param propertyName="key"></param>
            <returns>
            The column with the specified Key. 
            If more than one <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> has the same key, the first Column is returned.
            </returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that uses CheckBox elements to represent row selection.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.ComboColumnContentProviderBase"/> that will be used to generate content for <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxCell"/> objects for this <see cref="T:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn.GenerateHeaderCell(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Returns a new instance of a <see cref="T:Infragistics.Controls.Editors.ComboHeaderCell"/>
            </summary>
            <param propertyName="row"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.RowSelectionCheckBoxColumn.GenerateDataCell(Infragistics.Controls.Editors.ComboRowBase)">
            <summary>
            Returns a new instance of a <see cref="T:Infragistics.Controls.Editors.ComboCell"/>
            </summary>
            <param propertyName="row"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.TextComboColumn">
            <summary>
            A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> that uses <see cref="T:System.Windows.Controls.TextBlock"/> elements to represent data.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextComboColumn.TextBlockStyle">
            <summary>
            Gets/Sets the <see cref="T:System.Windows.Style"/> that will be applied to the <see cref="T:System.Windows.Controls.TextBlock"/> that displays data in a <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/>
            when it is not in edit mode.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextComboColumn.TextWrappingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.TextComboColumn.TextWrapping"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextComboColumn.TextWrapping">
            <summary>
            Gets/Sets whether <see cref="P:Infragistics.Controls.Editors.TextComboColumn.TextWrapping"/> should be applied to the  <see cref="T:System.Windows.Controls.TextBlock"/> and <see cref="T:System.Windows.Controls.TextBox"/> of a <see cref="T:Infragistics.Controls.Editors.TextComboColumn"/>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.TextComboColumn.FormatStringProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.TextComboColumn.FormatString"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.TextComboColumn.FormatString">
            <summary>
            Gets/sets the format string that will be applied to all cells in the column, if applicable. 
            </summary>
            <remarks>
            Note: The <see cref="P:Infragistics.Controls.Editors.ComboColumn.ValueConverter"/> property has higher precedence. 
            <para>In order to set this property in xaml, the value must begin with {}. For example: FormatString="{}{0:C}"</para>
            </remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.TextComboColumn.GenerateContentProvider">
            <summary>
            Generates a new <see cref="T:Infragistics.Controls.Editors.Primitives.TextComboColumnContentProvider"/> that will be used to generate content for <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> objects for this <see cref="T:Infragistics.Controls.Editors.TextComboColumn"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboHeaderRow">
            <summary>
            An object that represents a header row in a <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboHeaderRow.#ctor(System.Object,Infragistics.Controls.Editors.XamMultiColumnComboEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboHeaderRow"/> class.
            </summary>
            <param name="data">The business object.</param>
            <param name="xamWebComboEditor">A reference to the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboHeaderRow.RowType">
            <summary>
            Gets the <see cref="P:Infragistics.Controls.Editors.ComboHeaderRow.RowType"/> of this <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboRow">
            <summary>
            An object that represents a data row in the ItemsSource of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRow.#ctor(System.Object,Infragistics.Controls.Editors.XamMultiColumnComboEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboRow"/> class.
            </summary>
            <param name="data">The business object.</param>
            <param name="xamWebComboEditor">A reference to the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRow.RowType">
            <summary>
            Gets the <see cref="P:Infragistics.Controls.Editors.ComboRow.RowType"/> of this <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboRowBase">
            <summary>
            The base class for an object that represents an item in the ItemsSource of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.#ctor(System.Object,Infragistics.Controls.Editors.XamMultiColumnComboEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/> class.
            </summary>
            <param name="data">The business object.</param>
            <param name="xamWebComboEditor">A reference to the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.ActualHeight">
            <summary>
            Gets the Actual height of the row. 
            </summary>
            <remarks>Note: this value is only available when the row is rendered.</remarks>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.Cells">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsCollection"/> that belongs to the <see cref="T:Infragistics.Controls.Editors.ComboRow"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.ComboEditor">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> that holds this <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.CellStyle">
            <summary>
            Gets/Sets the <see cref="T:System.Windows.Style"/> that will be used for all <see cref="T:Infragistics.Controls.Editors.ComboCellControlBase"/> objects on this <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.RowType">
            <summary>
            Gets the <see cref="P:Infragistics.Controls.Editors.ComboRowBase.RowType"/> of this <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.IsMouseOver">
            <summary>
            Gets whether the mouse is currently over the row.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.CanScrollHorizontally">
            <summary>
            Gets whether or not a row will ever need to scroll horizontally. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.ResolveCell(Infragistics.Controls.Editors.ComboColumn)">
            <summary>
            Returns the <see cref="T:Infragistics.Controls.Editors.ComboCellBase"/> for the specified <see cref="T:Infragistics.Controls.Editors.ComboColumn"/>
            </summary>
            <param propertyName="column">The Column in which to resolve the cell.</param>
            <returns>The cell at the given column location.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.CreateInstanceOfRecyclingElement">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/> that represents the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.OnElementAttached(Infragistics.Controls.Editors.Primitives.ComboCellsPanel)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/> is attached to the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.OnElementReleased(Infragistics.Controls.Editors.Primitives.ComboCellsPanel)">
            <summary>
            Called when the <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/> is removed from the <see cref="T:Infragistics.Controls.Editors.ComboRowBase"/>
            </summary>
            <param name="element">A <see cref="T:Infragistics.Controls.Editors.Primitives.ComboCellsPanel"/></param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboRowBase.MeasureRaised">
            <summary>
            Gets/Sets whether the measure method was raised when Measure was called. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboRowBase.OnSelectionChanged">
            <summary>
            Invoked when the IsSelected proprety changes.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.XamComboEditor">
            <summary>
            Represents a selection control with a drop-down list that can be shown or hidden by clicking the arrow on the control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamComboEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.XamComboEditor"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamComboEditor.GenerateNewObject(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> object with the specified data. 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamComboEditor.OnDataManagerUnhooked">
            <summary>
            Called when a data manager is going to be unhooked.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamComboEditor.OnPropertyChanged(System.String)">
            <summary>
            Invoked when a property changes on the ComboEditorBase object.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamComboEditor.AllowFilteringProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamComboEditor.AllowFiltering"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamComboEditor.AllowFiltering">
            <summary>
            Gets or sets a value indicating whether the editor will filter the items when it is in edit mode.
            </summary>               
        </member>
        <member name="F:Infragistics.Controls.Editors.XamComboEditor.AutoCompleteProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamComboEditor.AutoComplete"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamComboEditor.AutoComplete">
            <summary>
            Gets/Sets whether or not the combo should look through the data source while the user is typing, and hilight the rest of the text
            that matches with what they are currently typing. 
            </summary>               
        </member>
        <member name="F:Infragistics.Controls.Editors.XamComboEditor.IsEditableProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamComboEditor.IsEditable"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamComboEditor.IsEditable">
            <summary>
            Gets/Sets whether the XamComboEditor should allow the end user to be able to type into the combo, for selection.
            <para>Note: this should be set to true, for AllowFilter and AutoComplete to work.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamComboEditor.OpenDropDownOnTypingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamComboEditor.OpenDropDownOnTyping"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamComboEditor.OpenDropDownOnTyping">
            <summary>
            Gets/Sets whether the DropDown will open when the user starts typing.
            </summary>               
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false and the drop-down is closed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.ItemAdding">
            <summary>
            Occurs when an item is going to be added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.ItemAdded">
            <summary>
            Occurs when an item is added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from false to true. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.SelectionChanged">
            <summary>
            Occurs when the selection of the ComboEditorBase changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamComboEditor.DataObjectRequested">
            <summary>
            This event is raised, when the ComboEditorBase needs to create a new data object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.ComboEditorBase`2">
            <summary>
            Represents a selection control with a drop-down list that can be shown or hidden by clicking the arrow on the control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.#ctor">
            <summary>
            Initializes a new instance of the ComboEditorBase class.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved within the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when the mouse is moved outside the bounds of the element.
            </summary>
            <param name="e">Provides information about the mouse position.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ComboEditorBase when a new template is applied. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when keyboard focus is shifted into or out of this element's visual tree 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the LostFocus event is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Called before the GotFocus event is raised.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnCreateAutomationPeer">
            <summary>
            When implemented in a derived class, returns class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> implementations for the Silverlight automation infrastructure.
            </summary>
            <returns>
            The class-specific <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> subclass to return.
            </returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.AllowDropDownResizingProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.AllowDropDownResizing"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.AllowDropDownResizing">
            <summary>
            Gets/sets whether the drop down panel should be resizable by the end user.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.IsDropDownOpenProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsDropDownOpen"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether the selectable drop-down is open.
            </summary>                       
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetRootBorderWidth">
            <summary>
            Gets the left plus right border width of the root element.
            </summary>
            <returns>Returns the sum of the left and right border width of the root element.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetRootBorderHeight">
            <summary>
            Gets the top plus bottom border height of the root element.
            </summary>
            <returns>Returns the sum of the top and bottom border height of the root element.</returns>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.IsTouchSupportEnabledProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsTouchSupportEnabled"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsTouchSupportEnabled">
            <summary>
            Returns or sets whether touch support is enabled for this control
            </summary>
            <seealso cref="F:Infragistics.Controls.Editors.ComboEditorBase`2.IsTouchSupportEnabledProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.ItemContainerStyleProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemContainerStyle"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemContainerStyle">
            <summary>
            Gets/sets the style that will be applied to all <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/>'s in the dropdown of this combo.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownHeight">
            <summary>
            Gets/Sets the maximum height the dropdown of this ComboEditorBase can be. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownHeightProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownHeight"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownHeight">
            <summary>
            Gets/Sets the minimum height the dropdown of this ComboEditorBase can be. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownWidth">
            <summary>
            Gets or sets the minimum width the dropdown of this ComboEditorBase can be.
            </summary>
            <value>
            The minimum width the dropdown of this ComboEditorBase can be.
            </value>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.MinDropDownWidth"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnMinDropDownWidthChanged(System.Double,System.Double)">
            <summary>
            MinDropDownWidthProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownWidth">
            <summary>
            Gets or sets the maximum width the dropdown of this ComboEditorBase can be.
            </summary>
            <value>
            The maximum width the dropdown of this ComboEditorBase can be.
            </value>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownWidthProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.MaxDropDownWidth"/> dependency property.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedIndexProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedIndex"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedIndex">
            <summary>
            Gets/Sets the index of the selected item in this ComboEditorBase.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItemProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItem"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItem">
            <summary>
            Gets/Sets the selected data item of this ComboEditorBase
            <para>Note: the item will be of your data model, not of type <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/></para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItemsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItems"/> dependency property. 
            </summary>               
        </member>
        <!-- Badly formed XML comment ignored for member "P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedItems" -->
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.NotifySelectedItemsCollectionAfterItemsAdded(System.Collections.IList)">
            <summary>
            Manually execute the SelectedItems.CollectionChanged event handler. This needs to be done in case a multiple items are added at once.
            In such cases the collection changed event handler should be executed only once for better performance.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsSelectedMemberPath">
            <summary>
            Gets / sets the path to the property on the <see cref="!:XamComboEditor.ItemsSource"/> object to populate the <see cref="!:XamComboEditor.SelectedItems"/> of the <see cref="T:Infragistics.Controls.Editors.XamComboEditor"/>.
            Note that it should be a Boolean property path name that is on each data item whose value will be used to determine if the item is selected/checked. 
            </summary>
            <value>
            The IsSelected member path.
            </value>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.IsSelectedMemberPathProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsSelectedMemberPath"/> dependency property.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnSelectedMemberPathChanged(System.String,System.String)">
            <summary>
            IsSelectedMemberPathProperty property changed handler.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.ItemFiltersProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemFilters"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemFilters">
            <summary>
             Gets/Sets the <see cref="T:Infragistics.Controls.Editors.ComboItemFilter"/> that should be applied when filtering is turned on. 
             <para>Note: when not set, this will default to a StartsWith filter.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemTemplate">
            <summary>
            Gets/Sets the DataTemplate that should be applied to each <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> in the dropdown.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.ItemsSourceProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemsSource"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.ItemsSource">
            <summary>
            Gets or sets a collection used to generate the content of each item.
            </summary>               
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.DisplayMemberPathProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.DisplayMemberPath"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.DisplayMemberPath">
            <summary>
            Gets or sets a path to a value on the source object to serve as the visual representation of the object.
            </summary>               
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValuePath">
            <summary>
            Gets or sets the path from which the selected value will be obtained.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValuePathProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValuePath"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValue">
            <summary>
            Get or sets the selected value.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValueProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValue"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValues">
            <summary>
            Gets or sets the selected values.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValuesProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.SelectedValues"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.Items">
            <summary>
            Gets the collection used to generate the content of the control.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.AllowMultipleSelectionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.AllowMultipleSelection"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.AllowMultipleSelection">
            <summary>
            Gets/Sets whether the end user should be allowed to select multiple items at the same time.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.CheckBoxVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.CheckBoxVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.CheckBoxVisibility">
            <summary>
            Gets/Sets whether checkboxes should be displayed in the <see cref="T:Infragistics.Controls.Editors.ComboEditorItemControl"/>'s dropdown.
            </summary>               
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.MultiSelectValueDelimiterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.MultiSelectValueDelimiter"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.MultiSelectValueDelimiter">
            <summary>
            Gets/Sets the char that should be used break up the SelectedItems in the ComboEditorBase
            <para>This is only appleid when AllowMultipleSelection is true.</para>
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.AutoCompleteDelayProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.AutoCompleteDelay"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.AutoCompleteDelay">
            <summary>
            Gets or sets the minimum delay, in milliseconds, after text is typed
            in the text box before the
            ComboEditorBase control
            populates the list of possible matches in the drop-down.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.CustomValueEnteredActionProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.CustomValueEnteredAction"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.CustomValueEnteredAction">
            <summary>
            Gets/Sets what action should occur when entering data into the combo editor
            that doesn't exist in the underlying ItemsSource.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.EmptyTextProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.EmptyText"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.EmptyText">
            <summary>
            Gets/Sets the Text that should be displayed when the editor doesn't have anything selected. 
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.EditAreaBackgroundProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.EditAreaBackground"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.EditAreaBackground">
            <summary>
            Controls the color that will be applied to the text area when the control is editable.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownButtonDisplayMode">
            <summary>
            Specifies when to display the drop down button. Default is <b>Always</b>.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownButtonDisplayModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownButtonDisplayMode"/> dependency property.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.DataManager">
            <summary>
            Gets a reference to the <see cref="T:Infragistics.DataManagerBase"/> of the ComboEditorBase.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.ComboEditorBase`2.IsEditableResolvedProperty">
            <summary>
            Identifies the read-only <see cref="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsEditableResolved"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.DataCount">
            <summary>
            Gets the amount of objects in the collection.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.IsBoundToPrimitiveTypeData">
            <summary>
            Gets whether the editor is bound to ItemsSource with items of primitive types(strings/enums). Returns null when the ItemsSource is null.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDataManagerUnhooked">
            <summary>
            Called when a data manager is going to be unhooked.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetStartsWithCondition(System.Type,System.String,System.String,Infragistics.CachedTypedInfo)">
            <summary>
            Gets the starts with condition.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="filterText">The filter text.</param>
            <param name="CachedTypedInfo">Cached typed info.</param>
            <returns>CustomComparisonCondition</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetStartsWithCondition(System.Type,System.String,System.String)">
            <summary>
            Gets the starts with condition.
            </summary>
            <param name="dataType">Type of the data.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="filterText">The filter text.</param>
            <returns>CustomComparisonCondition</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.EnsureDataManager">
            <summary>
            This method checks to ensure that a DataManagerBase is created for a given level and if not creates it for that level.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.InvalidateScrollPanel(System.Boolean)">
            <summary>
            Forces the underlying dropwdown panel to invalidate.
            </summary>
            <param name="resetScrollPosition"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.EnsurePopupsAllowsTransparencyInSync">
            <summary>
            This method ensures that if the window hosting the control has its AllowsTransparency set to true the dropdown popup AllowsTransparency is also true.
            We're doing this only if we're running on Windowns version bellow 8. TFS214885 - it seems there is an issue ion Win7 when the host window allows transparency
            when a popuup is shown(IsOpen=true) and tehn closed(IsOpen=false) the UI is not updated
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GenerateNewObject(System.Object)">
            <summary>
            Override this on a base class to create a new instance of the object that should wrap the data.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.CreateItem(System.Object,Infragistics.DataManagerBase)">
            <summary>
            Creates a new ComboEditorItem object 
            </summary>
            <param propertyName="data"></param>
            <param propertyName="dataManager"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.CreateItem">
            <summary>
            Creates a new object with a default underlying data object.
            </summary>
            <returns>The item that was created.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.CreateItem(System.Object)">
            <summary>
            Creates a new object using the inputted data object.
            </summary>
            <param name="dataItem">The business object.</param>
            <returns>The item that was created.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetDataItem(System.Int32)">
            <summary>
            Resolves the item at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The item that is requested.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.AddItem(`0)">
            <summary>
            Adds a new object to the collection
            </summary>
            <param name="addedObject">An item that will be added.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.RemoveItem(`0)">
            <summary>
            Removes a ComboEditorItem from the underlying ItemSource
            </summary>
            <param propertyName="removedObject"></param>
            <returns>true if the ComboEditorItem is removed.</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.RemoveItem(`0,Infragistics.DataManagerBase)">
            <summary>
            Removes a ComboEditorItem from the underlying ItemSource
            </summary>
            <param name="removedObject">The ComboEditorItem to remove</param>
            <param name="manager">The Manager that should be performing the removal.</param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.RemoveRange(System.Collections.Generic.IList{`0})">
            <summary>
            Removes the specified range of items from the collection.
            </summary>
            <param name="itemsToRemove">The range that will be removed.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.InsertItem(System.Int32,`0)">
            <summary>
            Adds an item to the collection at a given index.
            </summary>
            <param name="index">The index of the item.</param>
            <param name="insertedObject">An item that will be inserted.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.ChangeType(System.Object,System.Type)">
            <summary>
            Changes the value to given data type.
            </summary>
            <param name="value"></param>
            <param name="dataType"></param>
            <returns>the converted value if the conversion succeeds and null if fails</returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.InitializeData">
            <summary>
            A DataManager was just created, so this is our chance to look at the data and do any initializing.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnEditorKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed while the ComboEditorBase's textbox has focus.
            </summary>
            <param name="e">Event args that describe the key that was pressed.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.GetDataManagerDataFields">
            <summary>
            Returns an IEnumerable<DataField> from the DataManager stripping out fields that represent indexer properties.</DataField>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.ScrollItemIntoView(`0,System.Boolean)">
            <summary>
            Scrolls the specified <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> into view in the drop down.
            </summary>
            <param name="item"></param>
            <param name="toTop"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.ScrollItemIntoView(System.Object,System.Boolean)">
            <summary>
            Trys to resolve the specified data item as a <see cref="T:Infragistics.Controls.Editors.ComboEditorItem"/> and scrolls it into view, in the drop down.
            </summary>
            <param name="dataItem"></param>
            <param name="toTop"></param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.RegisterResources(System.String,System.Reflection.Assembly)">
            <summary>
            Adds an additonal Resx file in which the control will pull its resources from.
            </summary>
            <param name="name">The name of the embedded resx file that contains the resources to be used.</param>
            <param name="assembly">The assembly in which the resx file is embedded.</param>
            <remarks>Don't include the extension of the file, but prefix it with the default Namespace of the assembly.</remarks>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.UnregisterResources(System.String)">
            <summary>
            Removes a previously registered resx file.
            </summary>
            <param name="name">The name of the embedded resx file that was used for registration.</param>
            <remarks>
            Note: this won't have any effect on controls that are already in view and are already displaying strings.
            It will only affect any new controls created.
            </remarks>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDropDownClosing">
            <summary>
            Called before the DropDownClosing event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false and the drop-down is closed.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDropDownClosed">
            <summary>
            Called before the DropDownClosed event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.ItemAdding">
            <summary>
            Occurs when an item is going to be added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnItemAdding(`0)">
            <summary>
            Called before the ItemAdding event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.ItemAdded">
            <summary>
            Occurs when an item is added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnItemAdded(`0)">
            <summary>
            Called before the ItemAdded event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from false to true. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDropDownOpening">
            <summary>
            Called before the DropDownOpening event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDropDownOpened">
            <summary>
            Called before the DropDownOpened event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.SelectionChanged">
            <summary>
            Occurs when the selection of the ComboEditorBase changes.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnSelectionChanged(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>
            Called before the SelectionChanged event occurs.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.DataObjectRequested">
            <summary>
            This event is raised, when the ComboEditorBase needs to create a new data object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnDataObjectRequested(Infragistics.HandleableObjectGenerationEventArgs)">
            <summary>
            Called before the DataObjectRequested event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.Editor_LostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the LostFocus event of the Editor control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.TextInput" /> event occurs.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Input.TextCompositionEventArgs" /> that contains the event data.</param>
        </member>
        <member name="E:Infragistics.Controls.Editors.ComboEditorBase`2.PropertyChanged">
            <summary>
            Fired when a property changes on the ComboEditorBase.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.OnPropertyChanged(System.String)">
            <summary>
            Invoked when a property changes on the ComboEditorBase object.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.PropertiesToIgnore">
            <summary>
            Gets a List of properties that shouldn't be saved when the PersistenceManager goes to save them.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.ComboEditorBase`2.PriorityProperties">
            <summary>
            Gets a List of properties that should be applied, before even trying to look at any other property on the object.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.FinishedLoadingPersistence">
            <summary>
            Allows an object to perform an operation, after it's been loaded.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.ComboEditorBase`2.ParseEnum(System.String,System.Type)">
            <summary>
            Parses Enum from string. First try to do it with respoect to the case if it fails then try ignoring the case.
            </summary>
            <param name="text"></param>
            <param name="typeOfTheEnum"></param>
            <returns></returns>
        </member>
        <member name="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor">
            <summary>
            Represents a selection control with a drop-down list of data items that display their associated properties in a multi-column grid like arrangement.  The dropdown list can be shown or hidden by clicking the arrow on the control.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> class.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.AutoGenerateColumnsProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.AutoGenerateColumns"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.AutoGenerateColumns">
            <summary>
            Gets/sets whether the columns this <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> should be generated if otherwise not specified.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.Columns">
            <summary>
            Gets the <see cref="T:Infragistics.Controls.Editors.ComboColumnCollection"/> that the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> owns.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.ColumnTypeMappings">
            <summary>
            Gets a collection of <see cref="T:Infragistics.Controls.Editors.ComboColumnTypeMapping"/> objects in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
            <remarks>
            This collection should be used to map a specific data type to a certain Column type for the AutoGeneration of columns
            in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>.
            </remarks>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FilterModeProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FilterMode"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FilterMode">
            <summary>
            Gets/sets whether the columns this <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/> should be generated if otherwise not specified.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.Footer"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.Footer">
            <summary>
            Gets/sets an object that will serve as content for the area at the bottom of the dropdown panel.
            </summary>
            <seealso cref="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterProperty"/>
            <seealso cref="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterTemplateProperty"/>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterTemplateProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterTemplate"/> dependency property
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterTemplate">
            <summary>
            Gets/sets a DataTemplate that will be used to layout content that will appear at the bottom of the dropdown panel.
            </summary>
            <seealso cref="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterTemplateProperty"/>
            <seealso cref="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.FooterProperty"/>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.LocalizedStrings">
            <summary>
            Returns a dictionary of localized strings for use by the control in its template.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.SelectedItemsResetButtonVisibilityProperty">
            <summary>
            Identifies the <see cref="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.SelectedItemsResetButtonVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.SelectedItemsResetButtonVisibility">
            <summary>
            Gets/sets whether a button is displayed in the control's UI that lets the end user reset the list of currently selected items.
            </summary>
        </member>
        <member name="F:Infragistics.Controls.Editors.XamMultiColumnComboEditor.ColumnWidthProperty">
            <summary>
            Identifies the <see cref="T:Infragistics.Controls.Editors.ComboColumnWidth"/> dependency property. 
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.XamMultiColumnComboEditor.ColumnWidth">
            <summary>
            Gets/Sets the Width that will be applied to every <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> in the <see cref="T:Infragistics.Controls.Editors.XamMultiColumnComboEditor"/>
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.GenerateColumnForField(Infragistics.DataField)">
            <summary>
            Returns a column for the specified <see cref="T:Infragistics.DataField"/>.
            </summary>
            <param propertyName="field">A <see cref="T:Infragistics.DataField"/>.</param>
            <returns>A <see cref="T:Infragistics.Controls.Editors.ComboColumn"/> based off of the type of the <see cref="T:Infragistics.DataField"/></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.OnApplyTemplate">
            <summary>
            Builds the visual tree for the XamMultiColumnComboEditor when a new template is applied. 
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.GenerateNewObject(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Controls.Editors.ComboRow"/> object with the specified data. 
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.InitializeData">
            <summary>
            A DataManager was just created, so this is our chance to look at the data and do any initializing.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.OnDropDownOpening">
            <summary>
            Called before the DropDownOpening event occurs.
            </summary>
        </member>
        <member name="M:Infragistics.Controls.Editors.XamMultiColumnComboEditor.OnEditorKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when a key is pressed while the ComboEditorBase's textbox has focus.
            </summary>
            <param name="e">Event args that describe the key that was pressed.</param>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.DropDownClosing">
            <summary>
            Occurs when the IsDropDownOpen property is changing from true to false. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.DropDownClosed">
            <summary>
            Occurs when the IsDropDownOpen property was changed from true to false and the drop-down is closed.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.ItemAdding">
            <summary>
            Occurs when an item is going to be added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.ItemAdded">
            <summary>
            Occurs when an item is added to the underlying ComboEditorItemCollection of the ComboEditorBase
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.DropDownOpening">
            <summary>
            Occurs when the value of the IsDropDownOpen property is changing from false to true. 
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.DropDownOpened">
            <summary>
            Occurs when the value of the IsDropDownOpen property has changed from false to true and the drop-down is open.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.SelectionChanged">
            <summary>
            Occurs when the selection of the ComboEditorBase changes.
            </summary>
        </member>
        <member name="E:Infragistics.Controls.Editors.XamMultiColumnComboEditor.DataObjectRequested">
            <summary>
            This event is raised, when the ComboEditorBase needs to create a new data object.
            </summary>
        </member>
        <member name="T:Infragistics.Controls.Editors.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Infragistics.Controls.Editors.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Infragistics.StringToCharTypeConverter">
            <summary>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that converts from strings to chars, and chars to strings.
            </summary>
        </member>
        <member name="M:Infragistics.StringToCharTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the sourceType is of type string.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.StringToCharTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns true if the destinationType is of type string.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.StringToCharTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string into a char, by taking the first character of the string.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Infragistics.StringToCharTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a char into a string.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
    </members>
</doc>
